AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless Express Application/API powered by API Gateway and Lambda
Outputs:
  ApiUrl:
    Description: Invoke URL for your API. Clicking this link will perform a GET request
      on the root resource of your API.
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: APIGatewayApi
        - .execute-api.
        - Ref: AWS::Region
        - .amazonaws.com/prod/
  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: AWS::Region
        - .console.aws.amazon.com/lambda/home?region=
        - Ref: AWS::Region
        - '#/functions/'
        - Ref: CustomerLambda
Parameters:
  DynamoStack:
    Description: Stack containing all the Dynamo Definitions
    Type: String
Resources:
  APIGatewayApi:
    Properties:
      DefinitionUri: s3://yamlbuildbucket/394dc303cf7f7b838f5e9094c38ea8e7
      StageName: prod
      Variables:
        CustomerLambdaFunctionName:
          Ref: CustomerLambda
        OrderLambdaFunctionName:
          Ref: OrderLambda
    Type: AWS::Serverless::Api
  CustomerLambda:
    Properties:
      CodeUri: s3://yamlbuildbucket/e27d38a4ebe546125149dc755240faa3
      Environment:
        Variables:
          TABLE_NAME:
            Fn::ImportValue:
              Fn::Sub: ${DynamoStack}-CustomerDynamoDBTable
      Events:
        ProxyApiGreedy:
          Properties:
            Method: ANY
            Path: /customers/{proxy+}
            RestApiId:
              Ref: APIGatewayApi
          Type: Api
        ProxyApiRoot:
          Properties:
            Method: ANY
            Path: /customers
            RestApiId:
              Ref: APIGatewayApi
          Type: Api
      Handler: lambda.handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: nodejs6.10
      Timeout: 30
    Type: AWS::Serverless::Function
  CustomerLambdaApiGatewayExecutionPermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - CustomerLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ':'
          - Ref: AWS::AccountId
          - ':'
          - Ref: APIGatewayApi
          - /*/*
    Type: AWS::Lambda::Permission
  LambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          - Action:
            - dynamodb:*
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:dynamodb:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - :table
                - /*
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role
  OrderLambda:
    Properties:
      CodeUri: s3://yamlbuildbucket/fac0ac951a3fb0b13cab70ebca460920
      Events:
        ProxyApiGreedy:
          Properties:
            Method: ANY
            Path: /orders/{proxy+}
            RestApiId:
              Ref: APIGatewayApi
          Type: Api
        ProxyApiRoot:
          Properties:
            Method: ANY
            Path: /orders
            RestApiId:
              Ref: APIGatewayApi
          Type: Api
      Handler: lambda.handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: nodejs6.10
      Timeout: 30
    Type: AWS::Serverless::Function
  OrderLambdaApiGatewayExecutionPermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - OrderLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ':'
          - Ref: AWS::AccountId
          - ':'
          - Ref: APIGatewayApi
          - /*/*
    Type: AWS::Lambda::Permission
Transform: AWS::Serverless-2016-10-31
